// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package store

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"basetable.com/internal/pkg/model"
)

func newCollectionsM(db *gorm.DB, opts ...gen.DOOption) collectionsM {
	_collectionsM := collectionsM{}

	_collectionsM.collectionsMDo.UseDB(db, opts...)
	_collectionsM.collectionsMDo.UseModel(&model.CollectionsM{})

	tableName := _collectionsM.collectionsMDo.TableName()
	_collectionsM.ALL = field.NewAsterisk(tableName)
	_collectionsM.ID = field.NewInt(tableName, "id")
	_collectionsM.Name = field.NewString(tableName, "name")
	_collectionsM.Type = field.NewInt(tableName, "type")
	_collectionsM.SourceTable = field.NewString(tableName, "source_table")
	_collectionsM.Options = field.NewString(tableName, "options")
	_collectionsM.CreatedAt = field.NewTime(tableName, "created_at")
	_collectionsM.UpdatedAt = field.NewTime(tableName, "updated_at")
	_collectionsM.DeletedAt = field.NewField(tableName, "deleted_at")

	_collectionsM.fillFieldMap()

	return _collectionsM
}

type collectionsM struct {
	collectionsMDo

	ALL         field.Asterisk
	ID          field.Int
	Name        field.String // 名称
	Type        field.Int    // 类型
	SourceTable field.String // 源表名称
	Options     field.String // 额外参数
	CreatedAt   field.Time   // 创建时间
	UpdatedAt   field.Time   // 更新时间
	DeletedAt   field.Field  // 删除时间

	fieldMap map[string]field.Expr
}

func (c collectionsM) Table(newTableName string) *collectionsM {
	c.collectionsMDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c collectionsM) As(alias string) *collectionsM {
	c.collectionsMDo.DO = *(c.collectionsMDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *collectionsM) updateTableName(table string) *collectionsM {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewInt(table, "id")
	c.Name = field.NewString(table, "name")
	c.Type = field.NewInt(table, "type")
	c.SourceTable = field.NewString(table, "source_table")
	c.Options = field.NewString(table, "options")
	c.CreatedAt = field.NewTime(table, "created_at")
	c.UpdatedAt = field.NewTime(table, "updated_at")
	c.DeletedAt = field.NewField(table, "deleted_at")

	c.fillFieldMap()

	return c
}

func (c *collectionsM) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *collectionsM) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 8)
	c.fieldMap["id"] = c.ID
	c.fieldMap["name"] = c.Name
	c.fieldMap["type"] = c.Type
	c.fieldMap["source_table"] = c.SourceTable
	c.fieldMap["options"] = c.Options
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["updated_at"] = c.UpdatedAt
	c.fieldMap["deleted_at"] = c.DeletedAt
}

func (c collectionsM) clone(db *gorm.DB) collectionsM {
	c.collectionsMDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c collectionsM) replaceDB(db *gorm.DB) collectionsM {
	c.collectionsMDo.ReplaceDB(db)
	return c
}

type collectionsMDo struct{ gen.DO }

type ICollectionsMDo interface {
	gen.SubQuery
	Debug() ICollectionsMDo
	WithContext(ctx context.Context) ICollectionsMDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ICollectionsMDo
	WriteDB() ICollectionsMDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ICollectionsMDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ICollectionsMDo
	Not(conds ...gen.Condition) ICollectionsMDo
	Or(conds ...gen.Condition) ICollectionsMDo
	Select(conds ...field.Expr) ICollectionsMDo
	Where(conds ...gen.Condition) ICollectionsMDo
	Order(conds ...field.Expr) ICollectionsMDo
	Distinct(cols ...field.Expr) ICollectionsMDo
	Omit(cols ...field.Expr) ICollectionsMDo
	Join(table schema.Tabler, on ...field.Expr) ICollectionsMDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ICollectionsMDo
	RightJoin(table schema.Tabler, on ...field.Expr) ICollectionsMDo
	Group(cols ...field.Expr) ICollectionsMDo
	Having(conds ...gen.Condition) ICollectionsMDo
	Limit(limit int) ICollectionsMDo
	Offset(offset int) ICollectionsMDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ICollectionsMDo
	Unscoped() ICollectionsMDo
	Create(values ...*model.CollectionsM) error
	CreateInBatches(values []*model.CollectionsM, batchSize int) error
	Save(values ...*model.CollectionsM) error
	First() (*model.CollectionsM, error)
	Take() (*model.CollectionsM, error)
	Last() (*model.CollectionsM, error)
	Find() ([]*model.CollectionsM, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CollectionsM, err error)
	FindInBatches(result *[]*model.CollectionsM, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.CollectionsM) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ICollectionsMDo
	Assign(attrs ...field.AssignExpr) ICollectionsMDo
	Joins(fields ...field.RelationField) ICollectionsMDo
	Preload(fields ...field.RelationField) ICollectionsMDo
	FirstOrInit() (*model.CollectionsM, error)
	FirstOrCreate() (*model.CollectionsM, error)
	FindByPage(offset int, limit int) (result []*model.CollectionsM, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ICollectionsMDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c collectionsMDo) Debug() ICollectionsMDo {
	return c.withDO(c.DO.Debug())
}

func (c collectionsMDo) WithContext(ctx context.Context) ICollectionsMDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c collectionsMDo) ReadDB() ICollectionsMDo {
	return c.Clauses(dbresolver.Read)
}

func (c collectionsMDo) WriteDB() ICollectionsMDo {
	return c.Clauses(dbresolver.Write)
}

func (c collectionsMDo) Session(config *gorm.Session) ICollectionsMDo {
	return c.withDO(c.DO.Session(config))
}

func (c collectionsMDo) Clauses(conds ...clause.Expression) ICollectionsMDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c collectionsMDo) Returning(value interface{}, columns ...string) ICollectionsMDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c collectionsMDo) Not(conds ...gen.Condition) ICollectionsMDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c collectionsMDo) Or(conds ...gen.Condition) ICollectionsMDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c collectionsMDo) Select(conds ...field.Expr) ICollectionsMDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c collectionsMDo) Where(conds ...gen.Condition) ICollectionsMDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c collectionsMDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ICollectionsMDo {
	return c.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (c collectionsMDo) Order(conds ...field.Expr) ICollectionsMDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c collectionsMDo) Distinct(cols ...field.Expr) ICollectionsMDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c collectionsMDo) Omit(cols ...field.Expr) ICollectionsMDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c collectionsMDo) Join(table schema.Tabler, on ...field.Expr) ICollectionsMDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c collectionsMDo) LeftJoin(table schema.Tabler, on ...field.Expr) ICollectionsMDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c collectionsMDo) RightJoin(table schema.Tabler, on ...field.Expr) ICollectionsMDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c collectionsMDo) Group(cols ...field.Expr) ICollectionsMDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c collectionsMDo) Having(conds ...gen.Condition) ICollectionsMDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c collectionsMDo) Limit(limit int) ICollectionsMDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c collectionsMDo) Offset(offset int) ICollectionsMDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c collectionsMDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ICollectionsMDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c collectionsMDo) Unscoped() ICollectionsMDo {
	return c.withDO(c.DO.Unscoped())
}

func (c collectionsMDo) Create(values ...*model.CollectionsM) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c collectionsMDo) CreateInBatches(values []*model.CollectionsM, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c collectionsMDo) Save(values ...*model.CollectionsM) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c collectionsMDo) First() (*model.CollectionsM, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.CollectionsM), nil
	}
}

func (c collectionsMDo) Take() (*model.CollectionsM, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.CollectionsM), nil
	}
}

func (c collectionsMDo) Last() (*model.CollectionsM, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.CollectionsM), nil
	}
}

func (c collectionsMDo) Find() ([]*model.CollectionsM, error) {
	result, err := c.DO.Find()
	return result.([]*model.CollectionsM), err
}

func (c collectionsMDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CollectionsM, err error) {
	buf := make([]*model.CollectionsM, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c collectionsMDo) FindInBatches(result *[]*model.CollectionsM, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c collectionsMDo) Attrs(attrs ...field.AssignExpr) ICollectionsMDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c collectionsMDo) Assign(attrs ...field.AssignExpr) ICollectionsMDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c collectionsMDo) Joins(fields ...field.RelationField) ICollectionsMDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c collectionsMDo) Preload(fields ...field.RelationField) ICollectionsMDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c collectionsMDo) FirstOrInit() (*model.CollectionsM, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.CollectionsM), nil
	}
}

func (c collectionsMDo) FirstOrCreate() (*model.CollectionsM, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.CollectionsM), nil
	}
}

func (c collectionsMDo) FindByPage(offset int, limit int) (result []*model.CollectionsM, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c collectionsMDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c collectionsMDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c collectionsMDo) Delete(models ...*model.CollectionsM) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *collectionsMDo) withDO(do gen.Dao) *collectionsMDo {
	c.DO = *do.(*gen.DO)
	return c
}
