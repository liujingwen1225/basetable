// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package store

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"basetable.com/internal/pkg/model"
)

func newUserM(db *gorm.DB, opts ...gen.DOOption) userM {
	_userM := userM{}

	_userM.userMDo.UseDB(db, opts...)
	_userM.userMDo.UseModel(&model.UserM{})

	tableName := _userM.userMDo.TableName()
	_userM.ALL = field.NewAsterisk(tableName)
	_userM.ID = field.NewInt(tableName, "id")
	_userM.CreatedAt = field.NewTime(tableName, "created_at")
	_userM.UpdatedAt = field.NewTime(tableName, "updated_at")
	_userM.DeletedAt = field.NewField(tableName, "deleted_at")
	_userM.Username = field.NewString(tableName, "username")
	_userM.Password = field.NewString(tableName, "password")
	_userM.Nickname = field.NewString(tableName, "nickname")
	_userM.Email = field.NewString(tableName, "email")
	_userM.Phone = field.NewString(tableName, "phone")
	_userM.Gender = field.NewInt(tableName, "gender")

	_userM.fillFieldMap()

	return _userM
}

type userM struct {
	userMDo

	ALL       field.Asterisk
	ID        field.Int
	CreatedAt field.Time
	UpdatedAt field.Time
	DeletedAt field.Field
	Username  field.String
	Password  field.String
	Nickname  field.String
	Email     field.String
	Phone     field.String
	Gender    field.Int

	fieldMap map[string]field.Expr
}

func (u userM) Table(newTableName string) *userM {
	u.userMDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userM) As(alias string) *userM {
	u.userMDo.DO = *(u.userMDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userM) updateTableName(table string) *userM {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt(table, "id")
	u.CreatedAt = field.NewTime(table, "created_at")
	u.UpdatedAt = field.NewTime(table, "updated_at")
	u.DeletedAt = field.NewField(table, "deleted_at")
	u.Username = field.NewString(table, "username")
	u.Password = field.NewString(table, "password")
	u.Nickname = field.NewString(table, "nickname")
	u.Email = field.NewString(table, "email")
	u.Phone = field.NewString(table, "phone")
	u.Gender = field.NewInt(table, "gender")

	u.fillFieldMap()

	return u
}

func (u *userM) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userM) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 10)
	u.fieldMap["id"] = u.ID
	u.fieldMap["created_at"] = u.CreatedAt
	u.fieldMap["updated_at"] = u.UpdatedAt
	u.fieldMap["deleted_at"] = u.DeletedAt
	u.fieldMap["username"] = u.Username
	u.fieldMap["password"] = u.Password
	u.fieldMap["nickname"] = u.Nickname
	u.fieldMap["email"] = u.Email
	u.fieldMap["phone"] = u.Phone
	u.fieldMap["gender"] = u.Gender
}

func (u userM) clone(db *gorm.DB) userM {
	u.userMDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userM) replaceDB(db *gorm.DB) userM {
	u.userMDo.ReplaceDB(db)
	return u
}

type userMDo struct{ gen.DO }

type IUserMDo interface {
	gen.SubQuery
	Debug() IUserMDo
	WithContext(ctx context.Context) IUserMDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserMDo
	WriteDB() IUserMDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserMDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserMDo
	Not(conds ...gen.Condition) IUserMDo
	Or(conds ...gen.Condition) IUserMDo
	Select(conds ...field.Expr) IUserMDo
	Where(conds ...gen.Condition) IUserMDo
	Order(conds ...field.Expr) IUserMDo
	Distinct(cols ...field.Expr) IUserMDo
	Omit(cols ...field.Expr) IUserMDo
	Join(table schema.Tabler, on ...field.Expr) IUserMDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserMDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserMDo
	Group(cols ...field.Expr) IUserMDo
	Having(conds ...gen.Condition) IUserMDo
	Limit(limit int) IUserMDo
	Offset(offset int) IUserMDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserMDo
	Unscoped() IUserMDo
	Create(values ...*model.UserM) error
	CreateInBatches(values []*model.UserM, batchSize int) error
	Save(values ...*model.UserM) error
	First() (*model.UserM, error)
	Take() (*model.UserM, error)
	Last() (*model.UserM, error)
	Find() ([]*model.UserM, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserM, err error)
	FindInBatches(result *[]*model.UserM, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UserM) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserMDo
	Assign(attrs ...field.AssignExpr) IUserMDo
	Joins(fields ...field.RelationField) IUserMDo
	Preload(fields ...field.RelationField) IUserMDo
	FirstOrInit() (*model.UserM, error)
	FirstOrCreate() (*model.UserM, error)
	FindByPage(offset int, limit int) (result []*model.UserM, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserMDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u userMDo) Debug() IUserMDo {
	return u.withDO(u.DO.Debug())
}

func (u userMDo) WithContext(ctx context.Context) IUserMDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userMDo) ReadDB() IUserMDo {
	return u.Clauses(dbresolver.Read)
}

func (u userMDo) WriteDB() IUserMDo {
	return u.Clauses(dbresolver.Write)
}

func (u userMDo) Session(config *gorm.Session) IUserMDo {
	return u.withDO(u.DO.Session(config))
}

func (u userMDo) Clauses(conds ...clause.Expression) IUserMDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userMDo) Returning(value interface{}, columns ...string) IUserMDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userMDo) Not(conds ...gen.Condition) IUserMDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userMDo) Or(conds ...gen.Condition) IUserMDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userMDo) Select(conds ...field.Expr) IUserMDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userMDo) Where(conds ...gen.Condition) IUserMDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userMDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IUserMDo {
	return u.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (u userMDo) Order(conds ...field.Expr) IUserMDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userMDo) Distinct(cols ...field.Expr) IUserMDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userMDo) Omit(cols ...field.Expr) IUserMDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userMDo) Join(table schema.Tabler, on ...field.Expr) IUserMDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userMDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserMDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userMDo) RightJoin(table schema.Tabler, on ...field.Expr) IUserMDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userMDo) Group(cols ...field.Expr) IUserMDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userMDo) Having(conds ...gen.Condition) IUserMDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userMDo) Limit(limit int) IUserMDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userMDo) Offset(offset int) IUserMDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userMDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserMDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userMDo) Unscoped() IUserMDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userMDo) Create(values ...*model.UserM) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userMDo) CreateInBatches(values []*model.UserM, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userMDo) Save(values ...*model.UserM) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userMDo) First() (*model.UserM, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserM), nil
	}
}

func (u userMDo) Take() (*model.UserM, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserM), nil
	}
}

func (u userMDo) Last() (*model.UserM, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserM), nil
	}
}

func (u userMDo) Find() ([]*model.UserM, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserM), err
}

func (u userMDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserM, err error) {
	buf := make([]*model.UserM, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userMDo) FindInBatches(result *[]*model.UserM, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userMDo) Attrs(attrs ...field.AssignExpr) IUserMDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userMDo) Assign(attrs ...field.AssignExpr) IUserMDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userMDo) Joins(fields ...field.RelationField) IUserMDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userMDo) Preload(fields ...field.RelationField) IUserMDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userMDo) FirstOrInit() (*model.UserM, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserM), nil
	}
}

func (u userMDo) FirstOrCreate() (*model.UserM, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserM), nil
	}
}

func (u userMDo) FindByPage(offset int, limit int) (result []*model.UserM, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userMDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userMDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userMDo) Delete(models ...*model.UserM) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userMDo) withDO(do gen.Dao) *userMDo {
	u.DO = *do.(*gen.DO)
	return u
}
