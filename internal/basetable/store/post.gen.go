// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package store

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"basetable.com/internal/pkg/model"
)

func newPostM(db *gorm.DB, opts ...gen.DOOption) postM {
	_postM := postM{}

	_postM.postMDo.UseDB(db, opts...)
	_postM.postMDo.UseModel(&model.PostM{})

	tableName := _postM.postMDo.TableName()
	_postM.ALL = field.NewAsterisk(tableName)
	_postM.ID = field.NewInt(tableName, "id")
	_postM.Username = field.NewString(tableName, "username")
	_postM.PostID = field.NewString(tableName, "postID")
	_postM.Title = field.NewString(tableName, "title")
	_postM.Content = field.NewString(tableName, "content")
	_postM.CreatedAt = field.NewTime(tableName, "createdAt")
	_postM.UpdatedAt = field.NewTime(tableName, "updatedAt")

	_postM.fillFieldMap()

	return _postM
}

type postM struct {
	postMDo

	ALL       field.Asterisk
	ID        field.Int
	Username  field.String
	PostID    field.String
	Title     field.String
	Content   field.String
	CreatedAt field.Time
	UpdatedAt field.Time

	fieldMap map[string]field.Expr
}

func (p postM) Table(newTableName string) *postM {
	p.postMDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p postM) As(alias string) *postM {
	p.postMDo.DO = *(p.postMDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *postM) updateTableName(table string) *postM {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewInt(table, "id")
	p.Username = field.NewString(table, "username")
	p.PostID = field.NewString(table, "postID")
	p.Title = field.NewString(table, "title")
	p.Content = field.NewString(table, "content")
	p.CreatedAt = field.NewTime(table, "createdAt")
	p.UpdatedAt = field.NewTime(table, "updatedAt")

	p.fillFieldMap()

	return p
}

func (p *postM) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *postM) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 7)
	p.fieldMap["id"] = p.ID
	p.fieldMap["username"] = p.Username
	p.fieldMap["postID"] = p.PostID
	p.fieldMap["title"] = p.Title
	p.fieldMap["content"] = p.Content
	p.fieldMap["createdAt"] = p.CreatedAt
	p.fieldMap["updatedAt"] = p.UpdatedAt
}

func (p postM) clone(db *gorm.DB) postM {
	p.postMDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p postM) replaceDB(db *gorm.DB) postM {
	p.postMDo.ReplaceDB(db)
	return p
}

type postMDo struct{ gen.DO }

type IPostMDo interface {
	gen.SubQuery
	Debug() IPostMDo
	WithContext(ctx context.Context) IPostMDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPostMDo
	WriteDB() IPostMDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPostMDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPostMDo
	Not(conds ...gen.Condition) IPostMDo
	Or(conds ...gen.Condition) IPostMDo
	Select(conds ...field.Expr) IPostMDo
	Where(conds ...gen.Condition) IPostMDo
	Order(conds ...field.Expr) IPostMDo
	Distinct(cols ...field.Expr) IPostMDo
	Omit(cols ...field.Expr) IPostMDo
	Join(table schema.Tabler, on ...field.Expr) IPostMDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPostMDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPostMDo
	Group(cols ...field.Expr) IPostMDo
	Having(conds ...gen.Condition) IPostMDo
	Limit(limit int) IPostMDo
	Offset(offset int) IPostMDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPostMDo
	Unscoped() IPostMDo
	Create(values ...*model.PostM) error
	CreateInBatches(values []*model.PostM, batchSize int) error
	Save(values ...*model.PostM) error
	First() (*model.PostM, error)
	Take() (*model.PostM, error)
	Last() (*model.PostM, error)
	Find() ([]*model.PostM, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PostM, err error)
	FindInBatches(result *[]*model.PostM, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.PostM) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPostMDo
	Assign(attrs ...field.AssignExpr) IPostMDo
	Joins(fields ...field.RelationField) IPostMDo
	Preload(fields ...field.RelationField) IPostMDo
	FirstOrInit() (*model.PostM, error)
	FirstOrCreate() (*model.PostM, error)
	FindByPage(offset int, limit int) (result []*model.PostM, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPostMDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p postMDo) Debug() IPostMDo {
	return p.withDO(p.DO.Debug())
}

func (p postMDo) WithContext(ctx context.Context) IPostMDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p postMDo) ReadDB() IPostMDo {
	return p.Clauses(dbresolver.Read)
}

func (p postMDo) WriteDB() IPostMDo {
	return p.Clauses(dbresolver.Write)
}

func (p postMDo) Session(config *gorm.Session) IPostMDo {
	return p.withDO(p.DO.Session(config))
}

func (p postMDo) Clauses(conds ...clause.Expression) IPostMDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p postMDo) Returning(value interface{}, columns ...string) IPostMDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p postMDo) Not(conds ...gen.Condition) IPostMDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p postMDo) Or(conds ...gen.Condition) IPostMDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p postMDo) Select(conds ...field.Expr) IPostMDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p postMDo) Where(conds ...gen.Condition) IPostMDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p postMDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IPostMDo {
	return p.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (p postMDo) Order(conds ...field.Expr) IPostMDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p postMDo) Distinct(cols ...field.Expr) IPostMDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p postMDo) Omit(cols ...field.Expr) IPostMDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p postMDo) Join(table schema.Tabler, on ...field.Expr) IPostMDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p postMDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPostMDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p postMDo) RightJoin(table schema.Tabler, on ...field.Expr) IPostMDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p postMDo) Group(cols ...field.Expr) IPostMDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p postMDo) Having(conds ...gen.Condition) IPostMDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p postMDo) Limit(limit int) IPostMDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p postMDo) Offset(offset int) IPostMDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p postMDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPostMDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p postMDo) Unscoped() IPostMDo {
	return p.withDO(p.DO.Unscoped())
}

func (p postMDo) Create(values ...*model.PostM) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p postMDo) CreateInBatches(values []*model.PostM, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p postMDo) Save(values ...*model.PostM) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p postMDo) First() (*model.PostM, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.PostM), nil
	}
}

func (p postMDo) Take() (*model.PostM, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.PostM), nil
	}
}

func (p postMDo) Last() (*model.PostM, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.PostM), nil
	}
}

func (p postMDo) Find() ([]*model.PostM, error) {
	result, err := p.DO.Find()
	return result.([]*model.PostM), err
}

func (p postMDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PostM, err error) {
	buf := make([]*model.PostM, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p postMDo) FindInBatches(result *[]*model.PostM, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p postMDo) Attrs(attrs ...field.AssignExpr) IPostMDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p postMDo) Assign(attrs ...field.AssignExpr) IPostMDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p postMDo) Joins(fields ...field.RelationField) IPostMDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p postMDo) Preload(fields ...field.RelationField) IPostMDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p postMDo) FirstOrInit() (*model.PostM, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.PostM), nil
	}
}

func (p postMDo) FirstOrCreate() (*model.PostM, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.PostM), nil
	}
}

func (p postMDo) FindByPage(offset int, limit int) (result []*model.PostM, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p postMDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p postMDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p postMDo) Delete(models ...*model.PostM) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *postMDo) withDO(do gen.Dao) *postMDo {
	p.DO = *do.(*gen.DO)
	return p
}
